model opf2_lag.mod;

#data WB2.dat;
#data LMBM3.dat;
#data WB5.dat;
data case9mod.dat;
#data case14mod.dat;
#data case39mod3.dat;
option presolve_eps 1e-6;
option master.solver cplexamp;
option master.presolve 0;
option master.cplex_options 'outlev=1';
option master.solver_msg 0;

option slave.solver_msg 0;
option slave.presolve 10;
param USE_HEURISTIC default 1; 
param USE_IPS_KNITRO default 0; 
param USE_IPS_COUENNE default 1; 
param ORACLE symbolic default "KNITRO";
set set_basis;
param lb;
param ZERO_RC_TOL := 1e-6;
let IS_PHASE_ONE := 1;
printf "%12s%6s%20s%20s%10s\n", "PHASE", "ITE", "LB", "RC", "ORACLE";
repeat{
	###
	#
	###
	problem master;
	#fix;
	#expand;
	#solve;
	solve>cplex.log;
	let lb := master_obj;
	#display IS_PHASE_ONE, master_obj;
	#display slack_re_pos, slack_re_neg, slack_im_pos, slack_im_neg;
	#exit;
	#display  master_basis;
	let{bus in bus_i} dual_re[bus] := i_balance_re[bus].dual;
	let{bus in bus_i} dual_im[bus] := i_balance_im[bus].dual;
	let dual_convexity := convexity.dual;
	#display master_obj;
	#display dual_p, dual_q;
	#display dual_convexity;
	#display lambda;
	###
	#
	###	
	problem slave;
	#display slave_obj;
	#fix;
	if USE_HEURISTIC == 1 then {
		let ORACLE := "KNITRO";
		option slave.solver knitroampl;
		option slave.knitro_options 'outlev=3 ms_enable=0 presolve=0 scale=0 feastol=1 feastolabs=1e-6 opttol=1 opttolabs=1e-6';
		close knitro.log;
		solve>knitro.log;
		if slave_obj>=-ZERO_RC_TOL then{
			let ORACLE := "KNITRO2";
			option slave.solver knitroampl;
			option slave.knitro_options 'outlev=0 ms_enable=1 ms_maxsolves=20 presolve=0 scale=0  feastol=1 feastolabs=1e-6 opttol=1 opttolabs=1e-6';
			solve>knitro.log;
			close knitro.log;
		}
	};
	if USE_HEURISTIC == 0 or slave_obj>=-ZERO_RC_TOL then{
		option slave.solver couenne;
		#option slave.couenne_options 'outlev=1';
		expand;
		solve;	
		#solve>couenne.log;
		close couenne.log;
		let ORACLE := "COUENNE";
	}
	#display slave_obj;
	let nIte := nIte +1;	 
	let{gen in gen_i} P_gen[nIte,gen] := p_gen[gen];
	let{gen in gen_i} Q_gen[nIte,gen] := q_gen[gen];
	let{bus in bus_i} V_re[nIte,bus] := v_re[bus];
	let{bus in bus_i} V_im[nIte,bus] := v_im[bus];
	let{bus in bus_i} I_re[nIte,bus] := i_re[bus];
	let{bus in bus_i} I_im[nIte,bus] := i_im[bus];
	#display v_re, v_im;
	
 	printf "%10s%6d%20.6f%20.6f%10s\n", if IS_PHASE_ONE == 1 then "PHASE1" else "PHASE2", nIte, lb, slave_obj, ORACLE;
	if slave_obj>=-ZERO_RC_TOL then{
		if IS_PHASE_ONE == 0 then {
         	printf "\n*** OPTIMAL SOLUTION ***\n";
         	printf "LowerBound       : %q\n", master_obj;
         	printf "Min reduced cost : %q\n", slave_obj;
         	fix;
         	break;
         }else {
			if master_obj > ZERO_RC_TOL then{
				printf "\n*** NO FEASIBLE SOLUTION ***\n";
				printf "Minimum infeasibilities : %q\n", master_obj;
				break;				
			}else{
				printf "\n*** PHASE 2 ***\n";
				let IS_PHASE_ONE := 0;				
			}
      }
	};
 	#display FEASIBILITY;
 	
	#if nIte >25 then exit;
};